{
  "openapi": "3.0.1",
  "info": {
    "title": "Move2Kube API",
    "description": "This is a partial documentation of the Move2Kube REST API.  \nThis documentation only describes the endpoints to add/remove workspaces, roles, role bindings and get access tokens.  \nAll API calls expect the `Authorization: Bearer <access-token>` HTTP header unless specified otherwise.  \nThe access token can be obtained in the same way as OAuth 2.0 using the token endpoint in the admin section.\n",
    "contact": {
      "email": "move2kube-dev@googlegroups.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "tags": [
    {
      "name": "move2kube",
      "description": "Helps migrate your app to Kubernetes.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://move2kube.konveyor.io/"
      }
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get an access token using client ID and client secret (for use with trusted clients).",
        "description": "Get an access token using client ID and client secret (for use with trusted clients).",
        "operationId": "get-tokens",
        "requestBody": {
          "description": "Use `grant_type=client_credentials` in the body and set the header  \n`Authorization: Basic base64(client_id + \":\" + client_secret)`\n",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "grant_type"
                ],
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "enum": [
                      "client_credentials"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Token"
          },
          "400": {
            "description": "Invalid format or validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to get the access token."
          }
        }
      }
    },
    "/workspaces": {
      "get": {
        "tags": [
          "workspaces"
        ],
        "summary": "Get all the workspaces you have access to.",
        "description": "Get all the workspaces you have access to.",
        "operationId": "get-workspaces",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Workspace"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to get all the workspaces."
          }
        }
      },
      "post": {
        "tags": [
          "workspaces"
        ],
        "summary": "Create a new workspace. The ID will be generated by the server.",
        "description": "Create a new workspace. The ID will be generated by the server.",
        "operationId": "create-workspace",
        "requestBody": {
          "description": "The metadata of the workspace.\nLeave the ID blank, it will be generated.\nLeave the projects blank, projects are managed through a different set of endpoints.\n",
          "content": {
            "application/json": {
              "example": {
                "name": "Team 1 Workspace",
                "description": "The workspace team 1 uses."
              },
              "schema": {
                "$ref": "#/components/schemas/Workspace"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the new workspace.",
                      "example": "work-1234"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid format or validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to create a new workspace."
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/workspaces/{workspace-id}": {
      "get": {
        "tags": [
          "workspaces"
        ],
        "summary": "Get the workspace with the given ID.",
        "description": "Get the workspace with the given ID.",
        "operationId": "get-workspace",
        "parameters": [
          {
            "name": "workspace-id",
            "in": "path",
            "description": "ID of the workspace to get.",
            "required": true,
            "example": "work-1234",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to get this workspace."
          },
          "404": {
            "description": "Workspace not found."
          }
        }
      },
      "put": {
        "tags": [
          "workspaces"
        ],
        "summary": "Update a workspace. The workspace will be created if it doesn't exist.",
        "description": "Update a workspace. The workspace will be created if it doesn't exist.",
        "operationId": "update-workspace",
        "parameters": [
          {
            "name": "workspace-id",
            "in": "path",
            "description": "ID of the workspace to update.",
            "required": true,
            "example": "work-1",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "requestBody": {
          "description": "The metadata of the workspace.\nLeave the ID blank, it will be generated.\nLeave the projects blank, projects are managed through a different set of endpoints.\n",
          "content": {
            "application/json": {
              "example": {
                "name": "Team 1 Workspace. Update Name.",
                "description": "The workspace team 1 uses. Updated description."
              },
              "schema": {
                "$ref": "#/components/schemas/Workspace"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created."
          },
          "204": {
            "description": "Updated."
          },
          "400": {
            "description": "Invalid format or validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to create/update this workspace."
          },
          "404": {
            "description": "Workspace not found."
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "workspaces"
        ],
        "summary": "Delete an existing workspace.",
        "description": "Delete an existing workspace.",
        "operationId": "delete-workspace",
        "parameters": [
          {
            "name": "workspace-id",
            "in": "path",
            "description": "ID of the workspace to delete.",
            "required": true,
            "example": "work-1",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to delete this workspace."
          },
          "404": {
            "description": "Workspace not found."
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get all the roles.",
        "description": "Get all the roles.",
        "operationId": "get-roles",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to get all the roles."
          }
        }
      },
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Create a new role.",
        "description": "Create a new role.",
        "operationId": "create-role",
        "requestBody": {
          "description": "The metadata of the role. Leave the ID blank, it will be generated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the new role.",
                      "example": "role-1234"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid format or validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to create a new role."
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/roles/{role-id}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get the role with the given ID.",
        "description": "Get the role with the given ID.",
        "operationId": "get-role",
        "parameters": [
          {
            "name": "role-id",
            "in": "path",
            "description": "ID of the role to get.",
            "required": true,
            "example": "team-7",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to get this role."
          },
          "404": {
            "description": "Role not found."
          }
        }
      },
      "put": {
        "tags": [
          "roles"
        ],
        "summary": "Update a role. The role will be created if it doesn't exist.",
        "description": "Update a role. The role will be created if it doesn't exist.",
        "operationId": "update-role",
        "parameters": [
          {
            "name": "role-id",
            "in": "path",
            "description": "ID of the role to update.",
            "required": true,
            "example": "team-1",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "requestBody": {
          "description": "The metadata of the role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created."
          },
          "204": {
            "description": "Updated."
          },
          "400": {
            "description": "Invalid format or validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to create/update this role."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Delete an existing role",
        "description": "Delete an existing role.",
        "operationId": "delete-role",
        "parameters": [
          {
            "name": "role-id",
            "in": "path",
            "description": "ID of the role to delete.",
            "required": true,
            "example": "team-1",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to delete this role."
          },
          "404": {
            "description": "Role not found."
          }
        }
      }
    },
    "/idps/{idp-id}/users/{user-id}/roles": {
      "get": {
        "tags": [
          "role-bindings"
        ],
        "summary": "Get all the roles for the given user.",
        "description": "Get all the roles for the given user.",
        "operationId": "get-roles-of-user",
        "parameters": [
          {
            "name": "idp-id",
            "in": "path",
            "description": "ID of the identity provider.",
            "required": true,
            "example": "idp-1",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          },
          {
            "name": "user-id",
            "in": "path",
            "description": "ID of the user as given by the identity provider.",
            "required": true,
            "example": "user-1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "List of role IDs assigned to the user.",
                  "example": [
                    "role-1",
                    "role-2"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to get the roles for this user."
          },
          "404": {
            "description": "User not found."
          }
        }
      },
      "patch": {
        "tags": [
          "role-bindings"
        ],
        "summary": "Update the roles of the given user.",
        "description": "Update the roles of the given user.",
        "operationId": "update-roles-of-user",
        "parameters": [
          {
            "name": "idp-id",
            "in": "path",
            "description": "ID of the identity provider.",
            "required": true,
            "example": "idp-1",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          },
          {
            "name": "user-id",
            "in": "path",
            "description": "ID of the user as given by the identity provider.",
            "required": true,
            "example": "user-1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Add, remove or overwrite the roles of the user.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "op": {
                    "type": "string",
                    "description": "add: add these roles to the existing roles the user has.  \nremove: remove these roles from the existing roles the user has.  \noverwrite: completely overwrite the existing roles the user has with these roles.\n",
                    "enum": [
                      "add",
                      "remove",
                      "overwrite"
                    ]
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of role IDs",
                    "example": [
                      "role-1",
                      "role-2"
                    ]
                  }
                },
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "Invalid format or validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to update the roles for this user."
          },
          "404": {
            "description": "User not found."
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/idps/{idp-id}/users/{user-id}/roles/{role-id}": {
      "put": {
        "tags": [
          "role-bindings"
        ],
        "summary": "Add a role to a user.",
        "description": "Add a role to a user.",
        "operationId": "add-role-to-user",
        "parameters": [
          {
            "name": "idp-id",
            "in": "path",
            "description": "ID of the identity provider.",
            "required": true,
            "example": "idp-1",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          },
          {
            "name": "user-id",
            "in": "path",
            "description": "ID of the user as given by the identity provider.",
            "required": true,
            "example": "user-1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role-id",
            "in": "path",
            "description": "ID of the role to add to the user.",
            "required": true,
            "example": "team-7",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to add this role to this user."
          },
          "404": {
            "description": "User not found."
          }
        }
      },
      "delete": {
        "tags": [
          "role-bindings"
        ],
        "summary": "Remove a role from a user.",
        "description": "Remove a role from a user.",
        "operationId": "remove-role-from-user",
        "parameters": [
          {
            "name": "idp-id",
            "in": "path",
            "description": "ID of the identity provider.",
            "required": true,
            "example": "idp-1",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          },
          {
            "name": "user-id",
            "in": "path",
            "description": "ID of the user as given by the identity provider.",
            "required": true,
            "example": "user-1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role-id",
            "in": "path",
            "description": "ID of the role to remove from the user.",
            "required": true,
            "example": "team-7",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Don't have authorization to remove this role from this user."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authorization header is missing or invalid.",
        "headers": {
          "WWW_Authenticate": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Token": {
        "description": "The access token.",
        "headers": {
          "Cache-Control": {
            "schema": {
              "type": "string",
              "enum": [
                "no-store"
              ]
            }
          },
          "Pragma": {
            "schema": {
              "type": "string",
              "enum": [
                "no-cache"
              ]
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "access_token": {
                  "type": "string",
                  "example": "eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
                },
                "token_type": {
                  "type": "string",
                  "example": "example"
                },
                "expires_in": {
                  "type": "number",
                  "example": 3600
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "ID": {
        "pattern": "^[a-zA-Z0-9-_]+$",
        "type": "string",
        "description": "A unique ID.",
        "example": "id-1234"
      },
      "Error": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "required": [
              "description"
            ],
            "properties": {
              "description": {
                "description": "A human readable error message.",
                "example": "failed to create the workspace. Error: ..."
              }
            }
          }
        }
      },
      "Project": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "object",
            "description": "A unique ID for the project.",
            "example": "proj-1234",
            "allOf": [
              {
                "$ref": "#/components/schemas/ID"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "A human readable name for the project.",
            "example": "Project 23"
          },
          "description": {
            "type": "string",
            "description": "A description about the project.",
            "example": "This is one of the projects that team 1 is working on."
          }
        }
      },
      "Workspace": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "object",
            "description": "A unique ID for the workspace.",
            "example": "work-1234",
            "allOf": [
              {
                "$ref": "#/components/schemas/ID"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "A human readable name for the workspace.",
            "example": "Team 1 Workspace"
          },
          "description": {
            "type": "string",
            "description": "A description about the workspace.",
            "example": "This is the workspace for all the projects of team 1."
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          }
        }
      },
      "Resource": {
        "type": "string",
        "description": "A resource is a URL path.",
        "example": "/workspaces/work-1234/projects/proj-42"
      },
      "Role": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "object",
            "description": "A unique ID for the role.",
            "example": "team-1",
            "allOf": [
              {
                "$ref": "#/components/schemas/ID"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "A human readable name for the role.",
            "example": "Team 1"
          },
          "description": {
            "type": "string",
            "description": "A description about the role",
            "example": "A member of team 1."
          },
          "rules": {
            "type": "array",
            "description": "The list of rules to apply for this role.\n",
            "example": [
              {
                "resources": [
                  "/workspaces/work-7/.+",
                  "/workspaces/work-42/projects/.*",
                  "/workspaces/work-123/projects/proj-2"
                ],
                "verbs": [
                  "all"
                ]
              },
              {
                "resources": [
                  "/workspaces/work-1236"
                ],
                "verbs": [
                  "create-project",
                  "delete-project"
                ]
              }
            ],
            "items": {
              "required": [
                "resources",
                "verbs"
              ],
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "description": "List of resources. The elements of this list are Javascript ES6 Regex patterns.\nWhen a request for a protected resource is received these regexs are used to\nmatch against the resource URL.\n",
                  "items": {
                    "$ref": "#/components/schemas/Resource"
                  }
                },
                "verbs": {
                  "type": "array",
                  "description": "List of allowed verbs.  \nFor now the only supported verb is `all` which allows all actions on the resource.\n",
                  "items": {
                    "type": "string",
                    "example": "all"
                  }
                }
              },
              "description": "A rule is a list of resources and the list of allowed verbs for those resources."
            }
          }
        }
      }
    }
  }
}